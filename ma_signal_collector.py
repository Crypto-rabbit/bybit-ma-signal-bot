# ‚úÖ ma_signal_collector.py ‚Äî WebSocket-—Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ MA

import asyncio
import datetime
import json
import os
from pathlib import Path
from datetime import timezone, timedelta
import logging

from dotenv import load_dotenv
import pandas as pd
import ccxt
import websockets
from itertools import combinations

# ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log_file = Path(__file__).with_name("ma_bot.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("ma_bot")

# ‚îÄ‚îÄ‚îÄ –ó–ê–ì–†–£–ó–ö–ê .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
base = Path(__file__).parent
env_path = base / ".env"
logger.info(f"üìÅ –ü–∞–ø–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {base}")
logger.info(f"üßæ .env –Ω–∞–π–¥–µ–Ω: {env_path.exists()}")
load_dotenv(dotenv_path=env_path)

BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_SECRET  = os.getenv("BYBIT_SECRET")

if not BYBIT_API_KEY or not BYBIT_SECRET:
    logger.critical("‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ BYBIT_API_KEY –∏ BYBIT_SECRET –≤ .env")
    raise RuntimeError("‚ùå .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")

# ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TIMEFRAME = '5m'
LIMIT     = 150

exchange = ccxt.bybit({
    'apiKey': BYBIT_API_KEY,
    'secret': BYBIT_SECRET,
    'enableRateLimit': True,
    'options': {'defaultType': 'future'},
})

connected = set()

# ‚îÄ‚îÄ‚îÄ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def broadcast(message: dict):
    if not connected:
        return
    data = json.dumps(message)
    results = await asyncio.gather(
        *(ws.send(data) for ws in connected),
        return_exceptions=True
    )
    for ws, result in zip(connected, results):
        if isinstance(result, Exception):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WebSocket: {result}")

async def handler(ws):
    connected.add(ws)
    try:
        await ws.wait_closed()
    finally:
        connected.remove(ws)

# ‚îÄ‚îÄ‚îÄ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_symbols():
    logger.info("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–∫–µ—Ä—ã —Å Bybit...")
    try:
        tickers = exchange.fetch_tickers()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
        return []

    symbols = []
    for symbol, data in tickers.items():
        if "/USDT" not in symbol and ":USDT" not in symbol:
            continue
        if not data.get("quoteVolume"):
            continue
        volume_usdt = float(data["quoteVolume"])
        symbols.append((symbol, volume_usdt))

    symbols.sort(key=lambda x: -x[1])
    seen_bases = set()
    unique_symbols = []

    for symbol, volume in symbols:
        base = symbol.split("/")[0]
        if base not in seen_bases:
            seen_bases.add(base)
            unique_symbols.append(symbol)
        if len(unique_symbols) >= 50:
            break

    logger.info(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω—ã {len(unique_symbols)} —Ç–æ–ø–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –æ–±—ä—ë–º—É")
    return unique_symbols

def fetch_ohlcv(symbol: str):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=TIMEFRAME, limit=LIMIT)
        df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        return df
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
        return None

def calculate_ma(df: pd.DataFrame, periods=(9, 18, 36, 72, 144)):
    for period in periods:
        df[f"ma{period}"] = df["close"].rolling(period).mean()
    return df

def detect_signals(df: pd.DataFrame, symbol: str):
    signals = []
    if len(df) < max(144, 20):
        return signals

    prev = df.iloc[-2]
    last = df.iloc[-1]
    ts = last["timestamp"].strftime("%Y-%m-%d %H:%M:%S")
    price = float(last["close"])

    ma_periods = [9, 18, 36, 72, 144]
    ma_pairs = list(combinations(ma_periods, 2))

    for short, long in ma_pairs:
        ma_short_prev = prev[f"ma{short}"]
        ma_long_prev = prev[f"ma{long}"]
        ma_short_last = last[f"ma{short}"]
        ma_long_last = last[f"ma{long}"]

        if ma_short_prev < ma_long_prev and ma_short_last > ma_long_last:
            signals.append({
                "timestamp": ts,
                "symbol": symbol,
                "type": "BUY",
                "price": price,
                "ma": f"MA{short}/MA{long}"
            })
        elif ma_short_prev > ma_long_prev and ma_short_last < ma_long_last:
            signals.append({
                "timestamp": ts,
                "symbol": symbol,
                "type": "SELL",
                "price": price,
                "ma": f"MA{short}/MA{long}"
            })

    return signals

# ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def signal_loop():
    symbols = fetch_symbols()
    if not symbols:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return

    logger.info(f"üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(symbols)} —Ç–æ–ø–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ Bybit...")

    while True:
        now = datetime.datetime.now(timezone.utc)
        next_check = (now + timedelta(minutes=5)).replace(second=0, microsecond=0)
        next_check = next_check.replace(minute=(next_check.minute // 5) * 5)
        wait_seconds = (next_check - now).total_seconds()

        logger.info(f"üïí –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_check.strftime('%H:%M:%S')} UTC (—á–µ—Ä–µ–∑ {int(wait_seconds)} —Å–µ–∫—É–Ω–¥)")
        await asyncio.sleep(wait_seconds)

        for symbol in symbols:
            df = fetch_ohlcv(symbol)
            ts = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            price = df["close"].iloc[-1] if df is not None and not df.empty else "-"

            if df is None:
                await broadcast({"timestamp": ts, "symbol": symbol, "type": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "price": price})
                continue

            df = calculate_ma(df)
            signals = detect_signals(df, symbol)

            if signals:
                for sig in signals:
                    await broadcast(sig)
            else:
                await broadcast({"timestamp": ts, "symbol": symbol, "type": "‚úÖ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞", "price": price})

        logger.info("‚úÖ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω\n")

# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    logger.info("üöÄ ma_signal_collector –∑–∞–ø—É—â–µ–Ω")
    try:
        server = await websockets.serve(handler, "localhost", 6789)
        logger.info("üì° WebSocket —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ws://localhost:6789")
    except Exception as e:
        logger.critical(f"‚ùå WebSocket –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}")
        return

    await signal_loop()

# üëâ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ main.py
async def run_bot():
    await main()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")